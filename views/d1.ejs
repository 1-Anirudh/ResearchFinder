<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Chat</title>
    <style>
        video {
            width: 300px;
            height: auto;
        }
    </style>
</head>
<body>
    <h1>Two-Participant Video Chat</h1>
    <video id="localVideo" autoplay muted></video>
    <video id="remoteVideo" autoplay></video>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io('/');
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');

let localStream;
let peerConnection;
const roomId = '<%= roomId %>';  // Can be dynamic

const iceServers = {
  iceServers: [
    { urls: 'stun:stun.l.google.com:19302' },  // Use Google's STUN server
  ],
};

// Get user media (access camera/microphone)
navigator.mediaDevices.getUserMedia({ video: true, audio: true })
  .then(stream => {
    localVideo.srcObject = stream;
    localStream = stream;
    socket.emit('join-room', roomId);
  })
  .catch(error => {
    console.error('Error accessing media devices.', error);
  });

socket.on('user-connected', () => {
  createOffer();
});

socket.on('offer', (offer) => {
  createAnswer(offer);
});

socket.on('answer', (answer) => {
  peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
});

socket.on('ice-candidate', (candidate) => {
  peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
});

socket.on('user-disconnected', () => {
  remoteVideo.srcObject = null;
});

function createPeerConnection() {
  peerConnection = new RTCPeerConnection(iceServers);

  peerConnection.onicecandidate = event => {
    if (event.candidate) {
      socket.emit('ice-candidate', event.candidate);
    }
  };

  peerConnection.ontrack = event => {
    remoteVideo.srcObject = event.streams[0];
  };

  localStream.getTracks().forEach(track => {
    peerConnection.addTrack(track, localStream);
  });
}

function createOffer() {
  createPeerConnection();
  peerConnection.createOffer()
    .then(offer => {
      peerConnection.setLocalDescription(offer);
      socket.emit('offer', offer);
    });
}

function createAnswer(offer) {
  createPeerConnection();
  peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
  peerConnection.createAnswer()
    .then(answer => {
      peerConnection.setLocalDescription(answer);
      socket.emit('answer', answer);
    });
}
    </script>
</body>
</html>
