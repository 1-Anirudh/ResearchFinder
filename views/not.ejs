<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Video Call</title>
</head>
<body>
  <video id="localVideo" autoplay playsinline muted></video>
  <video id="remoteVideo" autoplay playsinline></video>

  <input type="text" id="targetUserId" placeholder="Enter Target User ID">
  <button onclick="startCall()">Start Video Call</button>

  <script>
    const localVideo = document.getElementById('localVideo');
    const remoteVideo = document.getElementById('remoteVideo');
    const targetUserIdInput = document.getElementById('targetUserId');
    const yourUserId= '<%= userId %>';

    const webSocket = new WebSocket('ws://localhost:3000?userId=yourUserId');
    let localStream;
    let peerConnection;
    const config = {
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
    };

    navigator.mediaDevices.getUserMedia({ video: true, audio: true })
      .then(stream => {
        localStream = stream;
        localVideo.srcObject = stream;
      })
      .catch(error => console.error('Error accessing media devices.', error));

    webSocket.onmessage = (message) => {
      const data = JSON.parse(message.data);

      if (data.type === 'incoming-call') {
        // Handle incoming call request and automatically accept for demo
        console.log(`Incoming call from ${data.from}`);
        createAnswer();
      } else if (data.type === 'webrtc-offer') {
        handleOffer(data.sdp);
      } else if (data.type === 'webrtc-answer') {
        handleAnswer(data.sdp);
      } else if (data.type === 'webrtc-ice') {
        handleIceCandidate(data.candidate);
      }
    };

    function startCall() {
      const targetUserId = targetUserIdInput.value;
      if (!targetUserId) {
        alert('Please enter a Target User ID');
        return;
      }

      peerConnection = new RTCPeerConnection(config);
      localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

      peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
          webSocket.send(JSON.stringify({
            type: 'webrtc-ice',
            targetUserId: targetUserId,
            candidate: event.candidate
          }));
        }
      };

      peerConnection.ontrack = (event) => {
        remoteVideo.srcObject = event.streams[0];
      };

      peerConnection.createOffer()
        .then(offer => peerConnection.setLocalDescription(offer))
        .then(() => {
          webSocket.send(JSON.stringify({
            type: 'webrtc-offer',
            targetUserId: targetUserId,
            sdp: peerConnection.localDescription
          }));
        });
    }

    function handleOffer(offer) {
      peerConnection = new RTCPeerConnection(config);
      localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

      peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
          webSocket.send(JSON.stringify({
            type: 'webrtc-ice',
            targetUserId: targetUserIdInput.value,
            candidate: event.candidate
          }));
        }
      };

      peerConnection.ontrack = (event) => {
        remoteVideo.srcObject = event.streams[0];
      };

      peerConnection.setRemoteDescription(new RTCSessionDescription(offer))
        .then(() => peerConnection.createAnswer())
        .then(answer => peerConnection.setLocalDescription(answer))
        .then(() => {
          webSocket.send(JSON.stringify({
            type: 'webrtc-answer',
            targetUserId: targetUserIdInput.value,
            sdp: peerConnection.localDescription
          }));
        });
    }

    function handleAnswer(answer) {
      peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    }

    function handleIceCandidate(candidate) {
      peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    }
  </script>
</body>
</html>
