<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Calling</title>
    <style>
        video {
            width: 45%;
            height: auto;
        }
        #videos {
            display: flex;
            justify-content: space-around;
        }
    </style>
</head>
<body>
    <h1>Video Calling</h1>
    <div id="videos">
        <video id="localVideo" autoplay playsinline></video>
        <video id="remoteVideo" autoplay playsinline></video>
    </div>
    <button onclick="startCall()">Start Call</button>
    <script>
        const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
let localStream;
let remoteStream;
let peerConnection;
let userId = prompt("Enter your user ID:");
let targetUserId; // ID of the user you want to call

const serverIPAddress = '<%= serverIPaddress %>';
// WebSocket setup
const ws = new WebSocket(`ws://${serverIPAddress}?userId=${userId}`);

ws.onmessage = async (message) => {
    const parsedMessage = JSON.parse(message.data);

    if (parsedMessage.type === 'offer') {
        await handleOffer(parsedMessage);
    } else if (parsedMessage.type === 'answer') {
        await handleAnswer(parsedMessage);
    } else if (parsedMessage.type === 'ice-candidate') {
        await handleIceCandidate(parsedMessage.candidate);
    }
};

// Setup local video stream
async function setupLocalVideo() {
    try {
        localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        localVideo.srcObject = localStream;
    } catch (error) {
        console.error('Error accessing media devices.', error);
    }
}

// Initialize peer connection and setup ICE candidate handling
function createPeerConnection() {
    peerConnection = new RTCPeerConnection();

    // Add local stream to the peer connection
    localStream.getTracks().forEach(track => {
        peerConnection.addTrack(track, localStream);
    });

    // When remote stream is added
    peerConnection.ontrack = (event) => {
        remoteStream = event.streams[0];
        remoteVideo.srcObject = remoteStream;
    };

    // When ICE candidates are generated
    peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            ws.send(JSON.stringify({
                type: 'ice-candidate',
                targetUserId: targetUserId,
                candidate: event.candidate
            }));
        }
    };
}

// Start video call
async function startCall() {
    targetUserId = prompt("Enter the user ID of the person you want to call:");
    createPeerConnection();

    // Create offer
    const offer = await peerConnection.createOffer();
    await peerConnection.setLocalDescription(offer);

    ws.send(JSON.stringify({
        type: 'offer',
        targetUserId: targetUserId,
        offer: offer
    }));
}

// Handle incoming offer
async function handleOffer(message) {
    targetUserId = message.from;
    createPeerConnection();

    await peerConnection.setRemoteDescription(new RTCSessionDescription(message.offer));

    // Create and send an answer
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);

    ws.send(JSON.stringify({
        type: 'answer',
        targetUserId: message.from,
        answer: answer
    }));
}

// Handle incoming answer
async function handleAnswer(message) {
    await peerConnection.setRemoteDescription(new RTCSessionDescription(message.answer));
}

// Handle incoming ICE candidate
async function handleIceCandidate(candidate) {
    await peerConnection.addIceCandidate(candidate);
}

// Trigger local video setup on page load
setupLocalVideo();

    </script>
</body>
</html>
